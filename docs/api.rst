..  py:module:: epicsdbbuilder

Database Builder API
====================

Initialisation
--------------

..  function:: InitialiseDbd(epics_base, host_arch=None)

    This must be called once before calling any other functions.  `epics_base`
    must be an absolute path to the directory containing EPICS base, in
    particular this directory must contain both ``dbd/base.dbd`` and ``lib/``.
    This function will load the base EPICS dbd file.

    The host architecture can normally be computed automatically, but if this
    computation fails this can be specified by setting `host_arch`.

..  function:: LoadDbdFile(dbdfile, on_use=None)

    This can be called before creating records to load extra databases.  If
    `on_use` is not ``None`` it must be a callable taking one argument, and it
    will be called for each record that is created using records defined by this
    dbd.


Record Output
-------------

..  function:: WriteRecords(filename, header=None)

    This should be called after creating all records.  The generated records
    will be written out to the file `filename`.  If `header` is left unspecified
    then a standard disclaimer header will be generated:::

        # This file was automatically generated on Fri 27 Feb 2015 15:31:14 GMT.
        #
        # *** Please do not edit this file: edit the source file instead. ***

    Note that the leading ``#`` comments are added to any header that is passed

..  function:: Disclaimer(source=None)

    This function generates the disclaimer above.  If a source file name is
    passed then it is included in the disclaimer.

..  function:: CountRecords()

    Returns the number of records that have currently been created.

..  function:: ResetRecords()

    Resets the list of records to be written.  This can be used to write
    multiple databases.


Record Naming
-------------

Record naming works as follows.  Every time a record is created with a call the
appropriate method of :data:`records` the name argument passed to that method is
passed through the currently configured :func:`RecordName` method.

..  function:: SetRecordNames(names)

    This sets up a record naming convention.  The argument passed should support
    one method, :func:`RecordName` which will be called each time a new record
    is created.  This function takes a name as argument and returns the full
    name.

    By default an instance of ``BasicRecordNames()`` is installed, this passes
    its argument through unchanged.

    When this method is called the previously establishing record naming
    convention is returned.

..  class:: BasicRecordNames(prefix='', separator='', check=True)

    This implements a minimal naming convention.  If no `prefix` is specified
    record names are generated unchanged, otherwise the given `prefix` and
    `separator` are contatenated to the front of the passed argument.  If
    `check` is set the the resulting name is checked for length.

    ..  method:: RecordName(name)

        Returns `prefix` + `separator` + `name`.

..  function:: GetRecordNames()

    Returns the current record naming convention.

..  function:: SetTemplateRecordNames(prefix=None, separator=':')

    This is a wrapper around :class:`Parameter`, :class:`BasicRecordNames`, and
    :func:`SetRecordNames`.  Sets up a record naming convention with a template
    parameter as the prefix by default.

..  function:: RecordName(name)

    Applies the current record name conversion to compute a full record name.


Building Databases
------------------

..  data:: records

    This instance has a method for each record type, of the form:

    ..  method:: records.type(name, **kargs)

        .. x** (vim fix)

        Here `name` will be used to construct the record name according to the
        record naming rules currently in force and any field can be given a
        value by assigning it in `kargs`.

    Note that fields can be assigned either in the constructor or subsequently,
    and fields can be used as links::

        r = records.ai('NAME', INP = '@input')
        r.DESC = 'This is an ai record'
        r.FLNK = records.calc('NP1', CALC = 'A+1', INP = r.VAL)

..  class:: Parameter(name, description='', default=None)

    When using :func:`TemplateRecordNames` this can be used to create template
    parameters with the given `name`.  If `description` is given then this will
    be printed in the header.  If a `default` string is given it will be used as
    the parameter default value, otherwise the parameter will be created with no
    default value.

..  function:: ImportRecord(name)

    This generates a record reference without adding an entry into the generated
    database.  Use this when linking to records outside of the database.

..  function:: LookupRecord(full_name)

    Returns a reference to a record which has already been created.


Helper Functions
----------------

..  function::
    CP(record)
    MS(record)
    NP(record)
    PP(record)

    Used for record links to add the appropriate processing annotation to the
    link.

..  function:: create_fanout(name, *records, **args)

    Creates one or more fanout records (as necessary) to fan processing out to
    all records in `records`.  The first fanout record is named `name`, for
    others a sequence number is appended to `name`.

..  function:: create_dfanout(name, *records, **args)

    Creates one or more dfanout records as necessary to fan a data output to a
    the list of records in `records`.

