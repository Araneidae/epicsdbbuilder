'''Collections of records.'''

import sys
import time

import recordnames

class RecordSet(object):
    def Reset(self):
        self.__RecordSet = {}
        self.__HeaderLines = []

    def __init__(self):
        self.Reset()

    # Add a record to the list of records to be published.
    def PublishRecord(self, name, record):
        assert name not in self.__RecordSet, 'Record %s already defined' % name
        self.__RecordSet[name] = record

    # Returns the record with the given name.  We perform record name
    # expansion using the currently configured record name hook.
    def LookupRecord(self, record):
        return self.__RecordSet[recordnames.RecordName(record)]

    # Output complete set of records to stdout.
    def Print(self, output):
        for line in self.__HeaderLines:
            print >>output, line
        # Print the records in alphabetical order: gives the reader a fighting
        # chance to find their way around the generated database!
        for record in sorted(self.__RecordSet.keys()):
            self.__RecordSet[record].Print(output)

    # Returns the number of published records.
    def CountRecords(self):
        return len(self.__RecordSet)

    def AddHeaderLine(self, line):
        self.__HeaderLines.append(line)

recordset = RecordSet()



def Disclaimer(source = None):
    if source is None:
        from_source = '.'
    else:
        from_source = ' from\nsource: %s' % source

    now = time.strftime('%a %d %b %Y %H:%M:%S %Z')
    message = '''\
This file was automatically generated on %(now)s%(from_source)s

*** Please do not edit this file: edit the source file instead. ***
''' % locals()
    return message
    print s + ('\n' + m).join(message.split('\n')) + e


def WriteRecords(filename, header = None):
    if header is None:
        header = Disclaimer()
    with file(filename, 'w') as output:
        for line in header.split('\n'):
            print >>output, '#', line
        recordset.Print(output)


__all__ = ['WriteRecords', 'Disclaimer']
